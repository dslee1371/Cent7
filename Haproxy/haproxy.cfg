#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2        info

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
#    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend  main *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#
#    use_backend static          if url_static
#    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
#backend app
#    balance     roundrobin
#    server  app1 127.0.0.1:5001 check
#    server  app2 127.0.0.1:5002 check
#    server  app3 127.0.0.1:5003 check
#    server  app4 127.0.0.1:5004 check

frontend minishift-api
    bind *:8443
    default_backend minishift-api
    mode tcp
    option tcplog

backend minishift-api
    balance source
    mode tcp
    server minishift 192.168.6.81:8443 check



#frontend openshift-api-server
#    bind *:8443
#    acl ocp2_y-api req_ssl_sni -m end -i api.yg.ocp2.fu.igotit.co.kr
#    use_backend ocp2_y-api if ocp2_y-api
#    default_backend ocp2_y-api
#    mode tcp
#    option tcplog
#
#backend ocp2_y-api
#    balance source
#    mode tcp
#    server ygmaster01 192.168.2.101:8443 check
#    server ygmaster02 192.168.2.102:8443 check
#    server ygmaster03 192.168.2.103:8443 check

frontend openshift4-api-server
    bind *:6443
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    acl test-api req_ssl_sni -m end -i test.fu.igotit.co.kr
    use_backend test-api if test-api
    default_backend test-api 
    mode tcp
    option tcplog

backend test-api
    #balance leastconn
    balance source
    mode tcp
    #server bootstrap 192.168.6.210:6443 check
    server master01 192.168.6.211:6443 check
    server master02 192.168.6.212:6443 check
    server master03 192.168.6.213:6443 check


##
# balancing for OCP Machine Config Server
##
frontend machine-config-server
    bind *:22623
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    acl test-mc req_ssl_sni -m end -i test.fu.igotit.co.kr
    use_backend test-mc if test-mc
    default_backend test-mc
    mode tcp
    option tcplog

backend test-mc
    #balance leastconn
    balance source
    mode tcp
    server bootstrap 192.168.6.210:22623 check
    server master01 192.168.6.211:22623 check
    server master02 192.168.6.212:22623 check
    server master03 192.168.6.213:22623 check

##
# xwiki
##
frontend xwiki-http
    bind *:8080
    acl jenkins-http hdr_end(host) -i jenkins.test.fu.igotit.co.kr
    acl gitlab-http hdr_end(host) -i gitlab.baek.ocp3.fu.igotit.co.kr
    use_backend jenkins-http if jenkins-http
    use_backend gitlab-http if gitlab-http
    default_backend jenkins-http
#    default_backend xwiki-http

backend jenkins-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.11:8080 check

backend xwiki-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.50:8080 check

backend gitlab-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server gitlab 192.168.3.41:8888 check
##
# balancing for OCP Ingress Insecure Port & Admin Page
##
frontend ingress-http
    bind *:80
    #acl ocp2-http hdr(host) -m reg -i ^[^\.]+\.apps\.ocp2\.fu\.igotit\.co\.kr$
    #acl ocp3-http hdr(host) -m reg -i ^[^\.]+\.apps\.ocp3\.fu\.igotit\.co\.kr$
    acl nas-http hdr_end(host) -i nas.test.fu.igotit.co.kr
    acl test-http hdr_end(host) -i apps.ocp4.test.fu.igotit.co.kr
    acl test-http hdr_end(host) -i kbtest.ocp4.test.fu.igotit.co.kr
    acl test-http hdr_end(host) -i kbjava.ocp4.test.fu.igotit.co.kr
    acl test-m-http hdr_end(host) -i apps.ocp3.test.fu.igotit.co.kr
    acl image-http hdr_end(host) -i image.test.fu.igotit.co.kr
    acl storage-http hdr_end(host) -i storage.test.fu.igotit.co.kr
    acl study2_http hdr_end(host) -i study2.test.fu.igotit.co.kr
    acl study_http hdr_end(host) -i study.test.fu.igotit.co.kr
    acl k8s-baek_http hdr_end(host) -i baek.ocp3.fu.igotit.co.kr
    acl ostest_http hdr_end(host) -i ostest.fu.igotit.co.kr
    acl was_http hdr_end(host) -i baek.was01.test.fu.igotit.co.kr
    acl demo4-http hdr_end(host) -i apps.demo4.ocp2.fu.igotit.co.kr
    acl gitlab_http hdr_end(host) -i gitlab.baek.ocp3.fu.igotit.co.kr
    acl harbor_http hdr_end(host) -i harbor.demo4.ocp2.fu.igotit.co.kr
    acl baek3-http hdr_end(host) -i apps.baek3.ocp3.fu.igotit.co.kr
    use_backend nas-http if nas-http
    use_backend test-http if test-http
    use_backend test-m-http if test-m-http
    use_backend image-http if image-http
    use_backend storage-http if storage-http
    use_backend study_http if study_http 
    use_backend study2_http if study2_http 
    use_backend k8s-baek_http if k8s-baek_http 
    use_backend was_http if was_http
    use_backend demo4-http if demo4-http
    use_backend gitlab_http if gitlab_http
    use_backend harbor_http if harbor_http
    use_backend baek3-http if baek3-http
    default_backend test-http
    #mode tcp
    #option tcplog

backend nas-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.5:8080 check

backend test-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
#    server worker01 192.168.6.221:80 check
#    server worker02 192.168.6.222:80 check
    server route03 192.168.6.231:80 check
    server route04 192.168.6.232:80 check
#    server infra03 192.168.6.228:80 check

backend test-m-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.81:80 check

backend image-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.202:80 check

backend storage-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server worker01 192.168.6.3:80 check

backend study2_http
    balance source
    #mode tcp
    #option tcplog
    #server study2 192.168.6.31:80 check
    server study2 192.168.6.31:8080 check

backend study_http
    balance source
    #mode tcp
    #option tcplog
    server study 192.168.6.30:8080 check

backend k8s-baek_http
    balance source
    #mode tcp
    #option tcplog
    server k8s-node1 192.168.3.28:80 check

backend ostest_http
    balance source
    # mode tcp
    # option tcplog
    server ostest 192.168.6.139:80 check

backend was_http
    balance source
    # mode tcp
    # option tcplog
    server was01 192.168.6.41:80 check

backend demo4-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server route01 192.168.2.61:80 check
    server route02 192.168.2.62:80 check

backend gitlab_http
    balance leastconn
    # mode tcp
    server gitlab.back 192.168.3.41:10080 check

backend harbor_http
    balance leastconn
    # mode tcp
    server harbor 192.168.2.43:80 check

backend baek3-http
    balance leastconn
    # balance source
    # mode tcp
    # option tcplog
    server infra01 192.168.3.21:80 check

##
# balancing for OCP Ingress Secure Port
##
frontend ingress-https
    bind *:443
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    acl nas-https req_ssl_sni -m end -i nas.test.fu.igotit.co.kr
    acl test-https req_ssl_sni -m end -i apps.ocp4.test.fu.igotit.co.kr
    acl test-m-https req_ssl_sni -m end -i apps.ocp3.test.fu.igotit.co.kr
    acl image-https req_ssl_sni -m end -i image.test.fu.igotit.co.kr
    acl demo4-https req_ssl_sni -m end -i apps.demo4.ocp2.fu.igotit.co.kr
    acl baek3-https req_ssl_sni -m end -i apps.baek3.ocp3.fu.igotit.co.kr
    acl harbor-https req_ssl_sni -m end -i harbor.demo4.ocp2.fu.igotit.co.kr
    use_backend nas-https if nas-https
    use_backend test-https if test-https
    use_backend test-m-https if test-m-https
    use_backend image-https if image-https
    use_backend demo4-https if demo4-https
    use_backend baek3-https if baek3-https
    use_backend harbor-https if harbor-https
    default_backend test-https
    mode tcp
    option tcplog

backend nas-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server worker01 192.168.6.5:443 check

backend test-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
#    server worker01 192.168.6.221:443 check
#    server worker02 192.168.6.222:443 check
    server route01 192.168.6.231:443 check
    server route02 192.168.6.232:443 check
#    server infra03 192.168.6.228:443 check

backend test-m-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server worker01 192.168.6.81:443 check


backend image-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server worker01 192.168.6.202:443 check

backend demo4-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server route01 192.168.2.61:443 check
    server route02 192.168.2.62:443 check

backend harbor-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server harbor 192.168.2.43:443 check

backend baek3-https
    balance leastconn
    # balance source
    mode tcp
    #option tcplog
    server infra01 192.168.3.21:443 check
